#
# Copyright IBM Corp All Rights Reserved
#
# SPDX-License-Identifier: Apache-2.0
#
version: '2'

services:
  zookeeper0:
    extends:
      file: dc-orderer-kafka-base.yml
      service: zookeeper
    container_name: zookeeper0
    environment:
     - ZOO_MY_ID=1
     - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
 
  zookeeper1:
    extends:
      file: dc-orderer-kafka-base.yml
      service: zookeeper
    container_name: zookeeper1
    environment:
     - ZOO_MY_ID=2
     - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
   
  zookeeper2:
   extends:
     file: dc-orderer-kafka-base.yml
     service: zookeeper
   container_name: zookeeper2
   environment:
     - ZOO_MY_ID=3
     - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
 
  kafka0:
   extends:
     file: dc-orderer-kafka-base.yml
     service: kafka
   container_name: kafka0
   environment:
     - KAFKA_BROKER_ID=0
     - KAFKA_MIN_INSYNC_REPLICAS=2
     - KAFKA_DEFAULT_REPLICATION_FACTOR=3
     - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
     - KAFKA_MESSAGE_MAX_BYTES=103809024 
     - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024 
     - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=103809024 
       
   depends_on:
     - zookeeper0
     - zookeeper1
     - zookeeper2
     

  kafka1:
   extends:
     file: dc-orderer-kafka-base.yml
     service: kafka
   container_name: kafka1
   environment:
     - KAFKA_BROKER_ID=1
     - KAFKA_MIN_INSYNC_REPLICAS=2
     - KAFKA_DEFAULT_REPLICATION_FACTOR=3
     - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
     - KAFKA_MESSAGE_MAX_BYTES=103809024
     - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
     - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=103809024
       
   depends_on:
     - zookeeper0
     - zookeeper1
     - zookeeper2
    

  kafka2:
   extends:
     file: dc-orderer-kafka-base.yml
     service: kafka
   container_name: kafka2
   environment:
     - KAFKA_BROKER_ID=2
     - KAFKA_MIN_INSYNC_REPLICAS=2
     - KAFKA_DEFAULT_REPLICATION_FACTOR=3
     - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
     - KAFKA_MESSAGE_MAX_BYTES=103809024
     - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
     - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=103809024
   depends_on:
     - zookeeper0
     - zookeeper1
     - zookeeper2
  
  kafka3:
   extends:
     file: dc-orderer-kafka-base.yml
     service: kafka
   container_name: kafka3
   environment:
     - KAFKA_BROKER_ID=3
     - KAFKA_MIN_INSYNC_REPLICAS=2
     - KAFKA_DEFAULT_REPLICATION_FACTOR=3
     - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
     - KAFKA_MESSAGE_MAX_BYTES=103809024 
     - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
     - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=103809024
     
   depends_on:
     - zookeeper0
     - zookeeper1
     - zookeeper2 

  ca.tfm.test:
   image: hyperledger/fabric-ca
   environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca.tfm.test
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.tfm.test-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/52305a40523391640bea176b2711b629fed640838fe836f22b5cc355344781bf_sk
   ports:
      - "7054:7054"
   command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
   volumes:
      - ./crypto-config/peerOrganizations/tfm.test/ca/:/etc/hyperledger/fabric-ca-server-config
   container_name: ca.tfm.test

  orderer.tfm.test:
    container_name: orderer.tfm.test
    image: hyperledger/fabric-orderer
    environment:
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis1.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/msp/orderer/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: orderer
    ports:
      - 7050:7050
    volumes:
      - ./commonConfig/:/etc/hyperledger/configtx
      - ./crypto-config/ordererOrganizations/tfm.test/orderers/orderer.tfm.test/:/etc/hyperledger/msp/orderer
      - ./crypto-config/peerOrganizations/tfm.test/peers/peer0.tfm.test/:/etc/hyperledger/msp/peer1Org1
      - ./crypto-config/peerOrganizations/tfm.test/users/Admin@tfm.test/msp/:/etc/hyperledger/fabric-ca-server-config/

  peer0.importer.test:
    container_name: peer0.importer.test
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.importer.test
      - CORE_LOGGING_PEER=debug
      - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_LOCALMSPID=importerMSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_ADDRESS=peer0.importer.test:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.importer.test:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.importer.test:7051
      - CORE_LEDGER_HISTORY_ENABLEHISTORYDATABASE=true
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=net_default
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdbimporter:5984
      # - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
      # provide the credentials for ledger to connect to CouchDB.  The username and password must
      # match the username and password set for the associated CouchDB.
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    # command: peer node start --peer-chaincodedev=true
    ports:
      - 7051:7051
      - 7053:7053
      - 7052:7052
    volumes:
      - /var/run/:/host/var/run/
      - ./crypto-config/peerOrganizations/importer.test/peers/peer0.importer.test/msp:/etc/hyperledger/msp/peer
      - ./crypto-config/peerOrganizations/importer.test/users:/etc/hyperledger/msp/users
      - ./commonConfig:/etc/hyperledger/configtx
      - ./commonConfig:/opt/gopath/src/github.com/hyperledger/fabric
      - ./chaincode:/opt/gopath/src/github.com/hyperledger/example
    depends_on:
      - orderer.tfm.test
      - couchdbimporter

      
  couchdbimporter:
    container_name: couchdbimporter
    image: hyperledger/fabric-couchdb
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment:
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    ports:
      - 5984:5984
      
  peer0.exporter.test:
    container_name: peer0.exporter.test
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.exporter.test
      - CORE_LOGGING_PEER=debug
      - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_LOCALMSPID=exporterMSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_ADDRESS=peer0.exporter.test:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.exporter.test:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.exporter.test:7051
      - CORE_LEDGER_HISTORY_ENABLEHISTORYDATABASE=true
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=net_default
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdbexporter:5984
      # - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7033
      # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
      # provide the credentials for ledger to connect to CouchDB.  The username and password must
      # match the username and password set for the associated CouchDB.
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    # command: peer node start --peer-chaincodedev=true
    ports:
      - 8051:7051
      - 8053:7053
      - 7033:7033
    volumes:
      - /var/run/:/host/var/run/
      - ./crypto-config/peerOrganizations/exporter.test/peers/peer0.exporter.test/msp:/etc/hyperledger/msp/peer
      - ./crypto-config/peerOrganizations/exporter.test/users:/etc/hyperledger/msp/users
      - ./commonConfig:/etc/hyperledger/configtx
      - ./commonConfig:/opt/gopath/src/github.com/hyperledger/fabric
      - ./chaincode:/opt/gopath/src/github.com/hyperledger/example
    depends_on:
      - orderer.tfm.test
      - couchdbexporter

      
  couchdbexporter:
    container_name: couchdbexporter
    image: hyperledger/fabric-couchdb
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment:
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    ports:
      - 5974:5984
  
  peer0.exporterbank.test:
    container_name: peer0.exporterbank.test
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.exporterbank.test
      - CORE_LOGGING_PEER=debug
      - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_LOCALMSPID=exporterbankMSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_ADDRESS=peer0.exporterbank.test:7051
      - CORE_LEDGER_HISTORY_ENABLEHISTORYDATABASE=true
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=net_default
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7092
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdbexporterbank:5984
      # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
      # provide the credentials for ledger to connect to CouchDB.  The username and password must
      # match the username and password set for the associated CouchDB.
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    # command: peer node start --peer-chaincodedev=true
    ports:
      - 7059:7051
      - 7065:7053
      - 7092:7092
    volumes:
      - /var/run/:/host/var/run/
      - ./crypto-config/peerOrganizations/exporterbank.test/peers/peer0.exporterbank.test/msp:/etc/hyperledger/msp/peer
      - ./crypto-config/peerOrganizations/exporterbank.test/users:/etc/hyperledger/msp/users
      - ./commonConfig:/etc/hyperledger/configtx
      - ./commonConfig:/opt/gopath/src/github.com/hyperledger/fabric
      - ./chaincode:/opt/gopath/src/github.com/hyperledger/example
    depends_on:
      - orderer.tfm.test
      - couchdbexporterbank

      
  couchdbexporterbank:
    container_name: couchdbexporterbank
    image: hyperledger/fabric-couchdb
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment:
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    ports:
      - 5954:5984
      
  peer0.importerbank.test:
    container_name: peer0.importerbank.test
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.importerbank.test
      - CORE_LOGGING_PEER=debug
      - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_LOCALMSPID=importerbankMSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_ADDRESS=peer0.importerbank.test:7051
      - CORE_LEDGER_HISTORY_ENABLEHISTORYDATABASE=true
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=net_network
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7012
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdbimporterbank:5984
      # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
      # provide the credentials for ledger to connect to CouchDB.  The username and password must
      # match the username and password set for the associated CouchDB.
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    # command: peer node start --peer-chaincodedev=true
    ports:
      - 7060:7051
      - 7066:7053
      - 7012:7012

    volumes:
      - /var/run/:/host/var/run/
      - ./crypto-config/peerOrganizations/importerbank.test/peers/peer0.importerbank.test/msp:/etc/hyperledger/msp/peer
      - ./crypto-config/peerOrganizations/importerbank.test/users:/etc/hyperledger/msp/users
      - ./commonConfig:/etc/hyperledger/configtx
      - ./commonConfig:/opt/gopath/src/github.com/hyperledger/fabric
      - ./chaincode:/opt/gopath/src/github.com/hyperledger/example
    depends_on:
      - orderer.tfm.test
      - couchdbimporterbank

      
  couchdbimporterbank:
    container_name: couchdbimporterbank
    image: hyperledger/fabric-couchdb
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment:
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    ports:
      - 5944:5984
  
  peer0.tfm.test:
    container_name: peer0.tfm.test
    image: hyperledger/fabric-peer
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.tfm.test
      - CORE_LOGGING_PEER=debug
      - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_LOCALMSPID=tfmMSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_ADDRESS=peer0.tfm.test:7051
      - CORE_LEDGER_HISTORY_ENABLEHISTORYDATABASE=true
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=net_default
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdbtfm:5984
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7011
      # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
      # provide the credentials for ledger to connect to CouchDB.  The username and password must
      # match the username and password set for the associated CouchDB.
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    # command: peer node start --peer-chaincodedev=true
    ports:
      - 7030:7051
      - 7036:7053
      - 7011:7011

    volumes:
      - /var/run/:/host/var/run/
      - ./crypto-config/peerOrganizations/tfm.test/peers/peer0.tfm.test/msp:/etc/hyperledger/msp/peer
      - ./crypto-config/peerOrganizations/tfm.test/users:/etc/hyperledger/msp/users
      - ./commonConfig:/etc/hyperledger/configtx
      - ./commonConfig:/opt/gopath/src/github.com/hyperledger/fabric
      - ./chaincode:/opt/gopath/src/github.com/hyperledger/example
    depends_on:
      - orderer.tfm.test
      - couchdbtfm

  couchdbtfm:
    container_name: couchdbtfm
    image: hyperledger/fabric-couchdb
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment:
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    ports:
      - 5971:5984
